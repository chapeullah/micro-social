services:
  gateway:
    build: ./gateway
    ports:
      - "8080:8080"
    depends_on: [auth-service, profile-service, posts-service, notification-service]

  auth-service:
    build: ./auth-service

    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/authdb
      SPRING_DATASOURCE_USERNAME: auth_user
      SPRING_DATASOURCE_PASSWORD: auth_pass
      SPRING_JPA_HIBERNATE_DDL_AUTO: update

      JWT_SECRET: ${JWT_SECRET}

      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.springframework.kafka.support.serializer.JsonSerializer

    depends_on: [postgres, kafka]

  profile-service:
    build: ./profile-service

    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/profilesdb
      SPRING_DATASOURCE_USERNAME: profile_user
      SPRING_DATASOURCE_PASSWORD: profile_pass

      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

    depends_on: [postgres, kafka]

  posts-service:
    build: ./posts-service

    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postsdb
      SPRING_DATASOURCE_USERNAME: posts_user
      SPRING_DATASOURCE_PASSWORD: posts_pass

    depends_on: [postgres]

  notification-service:
    build: ./notification-service

  postgres:
    image: postgres:16-alpine

    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin

    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka

    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER

    ports:
      - "9092:9092"
